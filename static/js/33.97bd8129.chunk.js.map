{"version":3,"file":"static/js/33.97bd8129.chunk.js","mappings":"4JAmBA,IAjBgB,SAAHA,GAAuB,IAAjBC,EAASD,EAATC,UACjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CACFC,QAASH,EACTI,OAAO,KACPC,MAAM,KACNC,UAAU,cACVC,aAAc,CACZC,QAAS,QACTC,UAAW,MACXC,WAAY,OACZC,YAAa,SAIrB,C,sHCdaC,EAAOC,EAAAA,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6EAOhBC,EAAKH,EAAAA,EAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+DAMdG,GAAQL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAYO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,uFAQpBM,EAAOR,EAAAA,EAAAA,IAAUS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,6KAajBQ,EAAMV,EAAAA,EAAAA,IAAUW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,2B,SCO7B,EAvCmB,SAAHhB,GAAoB,IAAd0B,EAAM1B,EAAN0B,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACE7B,EAAAA,EAAAA,KAACW,EAAI,CAAAkB,SACFL,EAAOM,KAAI,SAAAC,GAAiC,IAA9BC,EAAED,EAAFC,GAAIC,EAAKF,EAALE,MAAOC,EAAWH,EAAXG,YACxB,OACElC,EAAAA,EAAAA,KAACe,EAAE,CAAAc,UACD7B,EAAAA,EAAAA,KAACiB,EAAK,CAACkB,GAAE,WAAAC,OAAaJ,GAAMK,MAAO,CAAEC,KAAMb,GAAWI,UACpDF,EAAAA,EAAAA,MAACP,EAAI,CAAAS,SAAA,CACFK,GACClC,EAAAA,EAAAA,KAACsB,EAAG,CACFiB,IAAG,kCAAAH,OAAoCF,GACvCM,IAAKP,KAGPjC,EAAAA,EAAAA,KAACyC,EAAAA,IAAkB,CAACC,KAAM,MAE3BT,QAXED,EAgBb,OAEFhC,EAAAA,EAAAA,KAAC2C,EAAAA,GAAM,MAGb,C,0HC/BaC,E,QAAYhC,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gF,SCalC,EAZc,SAAHhB,GAAmB,IAAbmC,EAAKnC,EAALmC,MACf,OACEjC,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,CAAAC,UACE7B,EAAAA,EAAAA,KAAC4C,EAAS,CAAAf,SAAEI,KAGlB,E,SCqBA,EAxBa,WACX,IAAAY,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjCrB,EAAMuB,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAA4BJ,EAAAA,EAAAA,WAAS,GAAMK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAApCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAaxB,OAXAG,EAAAA,EAAAA,YAAU,WACRD,GAAU,IACVE,EAAAA,EAAAA,MACGC,MAAK,SAAA1D,GAAkB,IAAf2D,EAAO3D,EAAP2D,QACPR,EAAUQ,EACZ,IACCC,SAAQ,WACPL,GAAU,EACZ,GACJ,GAAG,KAGD1B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACE7B,EAAAA,EAAAA,KAAC2D,EAAK,CAAC1B,MAAM,oBACbjC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAU,CAACpC,OAAQA,IACnB4B,IAAUpD,EAAAA,EAAAA,KAAC6D,EAAAA,EAAM,MAGxB,C,iMC1BAC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHR,EAAa,eAAAzD,GAAAkE,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACTR,EAAAA,EAAAA,IAAU,8BAAD1B,OAA+B2B,IAAW,KAAD,EAA3D,OAAHI,EAAGC,EAAAG,KAAAH,EAAAI,OAAA,SACFL,EAAIM,MAAI,wBAAAL,EAAAM,OAAA,GAAAR,EAAA,KAChB,kBAHyB,OAAApE,EAAA6E,MAAA,KAAAC,UAAA,KAKbC,EAAiB,eAAA9C,GAAAiC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAa,EAAMC,GAAK,IAAAZ,EAAA,OAAAF,IAAAA,MAAA,SAAAe,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,cAAAU,EAAAV,KAAA,EACxBR,EAAAA,EAAAA,IAAU,wBAAD1B,OACD2B,EAAO,qDAAA3B,OAAoD2C,IACnF,KAAD,EAFQ,OAAHZ,EAAGa,EAAAT,KAAAS,EAAAR,OAAA,SAGFL,EAAIM,MAAI,wBAAAO,EAAAN,OAAA,GAAAI,EAAA,KAChB,gBAL6BG,GAAA,OAAAlD,EAAA4C,MAAA,KAAAC,UAAA,KAOjBM,EAAiB,eAAAC,GAAAnB,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAmB,EAAMC,GAAO,IAAAlB,EAAA,OAAAF,IAAAA,MAAA,SAAAqB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,cAAAgB,EAAAhB,KAAA,EAC1BR,EAAAA,EAAAA,IAAU,SAAD1B,OAChBiD,EAAO,aAAAjD,OAAY2B,EAAO,oBACnC,KAAD,EAFQ,OAAHI,EAAGmB,EAAAf,KAAAe,EAAAd,OAAA,SAGFL,EAAIM,MAAI,wBAAAa,EAAAZ,OAAA,GAAAU,EAAA,KAChB,gBAL6BG,GAAA,OAAAJ,EAAAR,MAAA,KAAAC,UAAA,KAOjBY,EAAS,eAAAC,GAAAzB,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAyB,EAAML,GAAO,IAAAlB,EAAA,OAAAF,IAAAA,MAAA,SAAA0B,GAAA,cAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,cAAAqB,EAAArB,KAAA,EAClBR,EAAAA,EAAAA,IAAU,SAAD1B,OAChBiD,EAAO,qBAAAjD,OAAoB2B,EAAO,oBAC3C,KAAD,EAFQ,OAAHI,EAAGwB,EAAApB,KAAAoB,EAAAnB,OAAA,SAGFL,EAAIM,MAAI,wBAAAkB,EAAAjB,OAAA,GAAAgB,EAAA,KAChB,gBALqBE,GAAA,OAAAH,EAAAd,MAAA,KAAAC,UAAA,KAOTiB,EAAY,eAAAC,GAAA9B,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAA8B,EAAMV,GAAO,IAAAlB,EAAA,OAAAF,IAAAA,MAAA,SAAA+B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cAAA0B,EAAA1B,KAAA,EACrBR,EAAAA,EAAAA,IAAU,SAAD1B,OAChBiD,EAAO,qBAAAjD,OAAoB2B,EAAO,2BAC3C,KAAD,EAFQ,OAAHI,EAAG6B,EAAAzB,KAAAyB,EAAAxB,OAAA,SAGFL,EAAIM,MAAI,wBAAAuB,EAAAtB,OAAA,GAAAqB,EAAA,KAChB,gBALwBE,GAAA,OAAAH,EAAAnB,MAAA,KAAAC,UAAA,I","sources":["components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/Title/Title.styled.js","components/Title/Title.jsx","pages/Home.jsx","service/fetchAPI.js"],"sourcesContent":["import { Dna } from 'react-loader-spinner';\n\n const Loader = ({ isLoading }) => {\n  return (\n    <Dna\n      visible={isLoading}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"dna-loading\"\n      wrapperStyle={{\n        display: 'block',\n        marginTop: '5px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      }}\n    />\n  );\n};\n\nexport default Loader;","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const Li = styled.li`\n  list-style: none;\n  padding: 15px;\n  margin: 0;\n`;\n\nexport const Links = styled(Link)`\n  text-decoration: none;\n  color: black;\n  :hover {\n    color: red;\n  }\n`;\n\nexport const Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  text-align: center;\n  width: 200px;\n  height: 355px;\n\n  :hover {\n    scale: 1.1;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 200px;\n`;\n","import PropTypes from 'prop-types';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { AiOutlineFileImage } from 'react-icons/ai';\nimport { List, Li, Links, Card ,Img} from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <List>\n        {movies.map(({ id, title, poster_path }) => {\n          return (\n            <Li key={id}>\n              <Links to={`/movies/${id}`} state={{ from: location }}>\n                <Card>\n                  {poster_path ? (\n                    <Img\n                      src={`https://image.tmdb.org/t/p/w200${poster_path}`}\n                      alt={title}\n                    />\n                  ) : (\n                    <AiOutlineFileImage size={200} />\n                  )}\n                  {title}\n                </Card>\n              </Links>\n            </Li>\n          );\n        })}\n      </List>\n      <Outlet />\n    </>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const TitleText = styled.h2`\n  text-align: center;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { TitleText } from './Title.styled';\n\nconst Title = ({ title }) => {\n  return (\n    <>\n      <TitleText>{title}</TitleText>\n    </>\n  );\n};\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","import { useState, useEffect } from 'react';\nimport { fetchTrending } from '../service/fetchAPI';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Title from '../components/Title/Title';\nimport  Loader  from 'components/Loader/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(true);\n    fetchTrending()\n      .then(({ results }) => {\n        setMovies(results);\n      })\n      .finally(() => {\n        setLoader(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <Title title=\"Trending today\" />\n      <MoviesList movies={movies} />\n      {loader && <Loader />}\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\nexport const fetchTrending = async () => {\n  const res = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const fetchSearchMovies = async query => {\n  const res = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return res.data;\n};\n\nexport const fetchDetailsMovie = async movieId => {\n  const res = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data;\n};\n\nexport const fetchCast = async movieId => {\n  const res = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return res.data;\n};\n\nexport const fetchReviews = async movieId => {\n  const res = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return res.data;\n};\n"],"names":["_ref","isLoading","_jsx","Dna","visible","height","width","ariaLabel","wrapperStyle","display","marginTop","marginLeft","marginRight","List","styled","_templateObject","_taggedTemplateLiteral","Li","_templateObject2","Links","Link","_templateObject3","Card","_templateObject4","Img","_templateObject5","movies","location","useLocation","_jsxs","_Fragment","children","map","_ref2","id","title","poster_path","to","concat","state","from","src","alt","AiOutlineFileImage","size","Outlet","TitleText","_useState","useState","_useState2","_slicedToArray","setMovies","_useState3","_useState4","loader","setLoader","useEffect","fetchTrending","then","results","finally","Title","MoviesList","Loader","axios","API_KEY","_asyncToGenerator","_regeneratorRuntime","_callee","res","_context","prev","next","sent","abrupt","data","stop","apply","arguments","fetchSearchMovies","_callee2","query","_context2","_x","fetchDetailsMovie","_ref3","_callee3","movieId","_context3","_x2","fetchCast","_ref4","_callee4","_context4","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}